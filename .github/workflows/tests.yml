name: Code Quality & Tests

on:
  push:
    branches: ['*']
    tags: ['*']
  pull_request:
    branches: ['main']

permissions:
  contents: write

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint flake8 bandit pytest pytest-cov

    - name: Get files
      run: |
        dvc repro

    - name: Upload model files
      uses: actions/upload-artifact@v4
      with:
        name: model-files
        path: models/
        if-no-files-found: error

    - name: Run pylint
      run: |
        pylint --output-format=text restaurant_model_training/ tests/ > pylint.log|| echo "Pylint issues found"

    - name: Update README with Pylint score badge
      run: python .github/metric_reporting/pylint_score.py

    - name: Run flake8
      run: flake8 restaurant_model_training/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run bandit
      run: bandit -r restaurant_model_training/ -c bandit.yaml -f json -o bandit-results.json || echo "Bandit issues found"

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=restaurant_model_training --cov-report=xml

    - name: Update coverage badge in README
      run: |
        # Extract coverage percentage from coverage.xml
        COVERAGE=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | cut -d'"' -f2 | awk '{printf "%.0f", $1*100}')
        echo "Coverage: ${COVERAGE}%"

        # Determine badge color based on coverage
        if [ "$COVERAGE" -ge 80 ]; then
          COLOR="brightgreen"
        elif [ "$COVERAGE" -ge 60 ]; then
          COLOR="yellow"
        else
          COLOR="red"
        fi

        # Update the coverage badge in README.md
        sed -i "s/!\[Coverage\](https:\/\/img\.shields\.io\/badge\/Coverage-[0-9]*%25-[a-z]*)/![Coverage](https:\/\/img.shields.io\/badge\/Coverage-${COVERAGE}%25-${COLOR})/" README.md

        echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY

    - name: Update README with performance metrics
      run: python .github/metric_reporting/performance_metrics.py

    - name: Update README with ML Test Score
      run: python .github/metric_reporting/ml_test_score.py

    - name: Commit updated README
      if: github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "Update coverage badge [skip ci], performance metrics and ML test score [skip ci]"
        git push || echo "No changes to push"

  versioning:
    needs: quality
    if: github.ref == 'refs/tags/release' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version
        id: version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            # Use the tag directly
            NEW_VERSION="${GITHUB_REF#refs/tags/v}"
            echo "Using pushed version tag: $NEW_VERSION"
          else
            # Bump patch version from latest stable vX.Y.Z tag
            LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
            if [[ -z "$LATEST_TAG" ]]; then
              echo "No existing version tag found, defaulting to v0.0.1"
              NEW_VERSION="v0.0.1"
            else
              IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG#v}"
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              echo "Bumped version: $LATEST_TAG -> $NEW_VERSION"
            fi
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      # Remove the pushed tags
      - name: Remove tags
        run: |
          if [[ "$GITHUB_REF" == "refs/tags/release" ]]; then
            git tag -d release
            git push origin :release
          else
            git tag -d v${{ steps.version.outputs.version }}
            git push origin :v${{ steps.version.outputs.version }}
          fi

      - name: Download model files
        uses: actions/download-artifact@v4
        with:
          name: model-files
          path: models/

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          artifacts: "models/*"
          allowUpdates: true

      - name: Bump patch and add pre tag
        id: prerelease
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ steps.version.outputs.version }}"
          PATCH=$((PATCH + 1))
          PRE_VERSION="v$MAJOR.$MINOR.$PATCH-pre"

          git checkout main
          git pull origin main

          echo "Creating empty commit for $PRE_VERSION"
          git commit --allow-empty -m "chore: bump version to $PRE_VERSION [skip ci]"
          git tag "$PRE_VERSION"

          git push origin main
          git push origin "$PRE_VERSION"